security:

    role_hierarchy:
        ROLE_ADMIN: ROLE_DEFAULT
        ROLE_SUPER_ADMINISTRATOR: [ ROLE_ADMIN, ROLE_EMPLOYEE, ROLE_API, ROLE_DEFAULT, ROLE_ALLOWED_TO_SWITCH ]

    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'bcrypt'
        App\Entity\User: 'bcrypt'

    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        in_memory:
            memory:
                users:
                    # ROLE_SUPER_ADMINISTRATOR
                    admin: { password: '$2y$10$sAgZMYfGIuQ5SkgXOoRoeuBcsOQpvVJjORhT0i8I6EiBp/YvUQflC', roles: ROLE_SUPER_ADMINISTRATOR } # admin
                    # ROLE_API

        app_user_provider:
            entity:
                class: App\Entity\User
                property: email

        all_admin_users:
            chain:
                providers: [ 'in_memory', 'app_user_provider' ]

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        main:
            lazy: true
            pattern: ^/*
            provider: all_admin_users
            # configure the maximum login attempts
            login_throttling:
                max_attempts: 5
                interval: '15 minutes'
            form_login:
                # "app_login" is the name of the route created previously
                login_path: app_login
                check_path: app_login
                default_target_path: app_default_index
                enable_csrf: true
            logout:
                path: app_logout
                target: app_login

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/login, roles: PUBLIC_ACCESS, requires_channel: https }
        - { path: ^/secure/*, roles: ROLE_ADMIN, requires_channel: https }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
